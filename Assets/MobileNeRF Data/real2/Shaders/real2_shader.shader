Shader "MobileNeRF/ViewDependenceNetworkShader/real2" {
    Properties {
        tDiffuse0x ("Diffuse Texture 0", 2D) = "white" {}
        tDiffuse1x ("Diffuse Texture 1", 2D) = "white" {}
    }

    CGINCLUDE
    #include "UnityCG.cginc"

    struct appdata {
        float4 vertex : POSITION;
        float2 uv : TEXCOORD0;
        UNITY_VERTEX_INPUT_INSTANCE_ID
    };

    struct v2f {
        float2 uv : TEXCOORD0;
        float4 vertex : SV_POSITION;
        float3 rayDirection : TEXCOORD1;
        UNITY_VERTEX_OUTPUT_STEREO
    };

    v2f vert(appdata v) {
        v2f o;

        UNITY_SETUP_INSTANCE_ID(v);
        UNITY_INITIALIZE_OUTPUT(v2f, o);
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        o.vertex = UnityObjectToClipPos(v.vertex);
        o.uv = v.uv;
        o.rayDirection = -WorldSpaceViewDir(v.vertex);
        o.rayDirection.xz = -o.rayDirection.xz;
o.rayDirection.xyz = o.rayDirection.xzy;

        return o;
    }

    sampler2D tDiffuse0x;
    sampler2D tDiffuse1x;

    half3 evaluateNetwork(fixed4 f0, fixed4 f1, fixed4 viewdir) {
        float4x4 intermediate_one = { -0.1135499, 0.1671366, -0.1169585, 0.0769427, 0.0095717, 0.1815352, 0.0337309, -0.0004100, 0.0627204, -0.0835301, 0.0816250, -0.0559324, -0.3322972, 0.0563339, -0.1900873, 0.1238539 };
        intermediate_one += f0.r * float4x4(-0.2198794, 0.0351576, 0.3157919, -0.8512368, 0.3434854, -0.7536880, -0.4361741, 0.0964107, -0.3481764, 0.0576328, 0.0539530, -0.2381042, 0.6859896, 0.0582046, 0.1016951, -0.1270041)
            + f0.g * float4x4(-0.3624398, -0.0930317, 0.3947842, -0.2684799, -0.8871241, -0.0915186, 0.6343375, -0.2535148, 0.0713517, 0.5992244, 0.0152563, -0.1527373, -2.2855463, 0.7198458, 0.3141478, -0.3734854)
            + f0.b * float4x4(-0.2391613, 0.0630636, 0.2745301, -0.2100912, -0.0554254, 0.1826108, -0.1648340, 0.1050301, -0.2893932, 0.2859629, -0.0190657, 0.8870734, -0.6973288, -0.3253914, 0.7731275, 0.2285503)
            + f0.a * float4x4(-0.2892699, 0.0974795, 0.2988642, 0.1898254, -0.3256768, 0.1572692, -0.3600387, 0.5246313, -0.4277226, 0.1801309, -0.6508327, 0.4076201, -0.3882677, -0.2962749, -0.2414481, -0.2266956)
            + f1.r * float4x4(-0.1006914, 0.1840884, 0.2559693, 0.4856147, -0.2374306, 0.0814315, -0.1999659, -0.0613559, 0.5649466, 0.7390046, 0.6679556, 0.1700993, 0.0282450, -0.7077998, -0.2249530, 0.0415938)
            + f1.g * float4x4(0.3070869, -0.4391129, -0.0106207, -0.5335386, 0.4927194, 0.5882468, 0.3077791, -0.6032254, 0.2298647, -0.1054930, 0.2331491, 0.4600106, -0.3761800, 0.6523943, 0.5991923, -0.3694568)
            + f1.b * float4x4(0.0855418, 0.6758626, -0.0943751, -0.1802589, -0.0966500, 0.3522392, -0.2951230, 0.1115970, -0.8511340, -0.4961335, 0.6738756, -0.6136423, 0.2352762, 0.2832416, 0.1617187, 0.4155595)
            + f1.a * float4x4(0.6119974, -0.8573349, 0.3439868, -0.2529935, 0.0548282, 0.4856655, 0.6241165, 0.4190928, 0.0779351, 0.0806741, 0.2417716, 0.3512768, -0.2684817, 0.0815473, 0.3371630, -0.3193755)
            + viewdir.r * float4x4(0.9851241, -0.4563554, -0.0000654, -0.0818370, -0.0299461, -0.0308713, 0.0565337, 0.3024816, 0.7984315, -0.3721024, 0.0591956, -0.3426986, 0.8310621, -0.1855644, -0.4707452, -0.3399925)
            + viewdir.g * float4x4(0.3291341, -0.4030711, -0.0734850, 0.1493965, -0.6461977, -0.2145169, 0.0903992, 0.1347977, 0.3528197, -0.0131599, 0.0320533, 0.2485258, -0.4452699, 0.0778490, -0.1567995, 0.7285981)
            + viewdir.b * float4x4(0.2997340, 0.0419936, -0.0764552, -0.4584029, -0.2071018, 0.4450383, -0.2350341, -0.3979719, 0.1850564, 0.1605104, 0.1637231, 0.0872319, 0.7782136, -0.0691088, -0.0773729, 0.2990046);
        intermediate_one[0] = max(intermediate_one[0], 0.0);
        intermediate_one[1] = max(intermediate_one[1], 0.0);
        intermediate_one[2] = max(intermediate_one[2], 0.0);
        intermediate_one[3] = max(intermediate_one[3], 0.0);
        float4x4 intermediate_two = float4x4(
            0.0390308, 0.1322523, -0.0997031, 0.1973790, 0.1088221, -0.0024973, 0.0353139, 0.1130742, 0.1679015, 0.0673370, 0.0091475, 0.0952607, 0.1382158, -0.0592890, 0.0076571, 0.0191727
        );
        intermediate_two += intermediate_one[0][0] * float4x4(0.2127982, 0.3395675, 0.5242893, -0.1662731, 0.2921135, 0.4046187, 0.4432736, -0.0225707, -0.0113951, 0.2660736, 0.4101296, 0.4574919, 0.2635008, -0.0081315, -0.4380707, -0.1782700)
            + intermediate_one[0][1] * float4x4(-0.0232916, -0.2116258, -0.1098080, 0.1320161, -0.2486948, -0.4234971, -0.4846266, -0.1894037, -0.1038637, 0.1665908, 0.1619146, -0.0639917, 0.7347489, -0.2635857, -0.3994569, 0.3054824)
            + intermediate_one[0][2] * float4x4(0.1733156, -0.1450522, -0.1785039, -0.1324453, -0.0285089, 0.1053106, -0.3995723, 0.3039652, 0.2883056, 0.3136149, 0.2845374, 0.2849094, -0.4932413, -0.2582960, -0.0657059, 0.1472967)
            + intermediate_one[0][3] * float4x4(0.5239025, 0.6696039, -1.7501597, -0.3522418, 0.4765532, -0.4763285, 0.3785622, -0.5165894, -0.5826744, 1.1892186, 0.5197956, -0.4419794, -1.0666438, -1.4540102, -0.4083110, 1.2148724)
            + intermediate_one[1][0] * float4x4(0.3661896, 0.2588968, -0.4936065, 0.1959576, 0.5277954, -0.3243184, 0.6987091, -0.1504225, 0.0457475, 0.0405618, 0.4967041, 0.0127736, -0.1961532, 0.3333945, -0.6057311, -0.2822784)
            + intermediate_one[1][1] * float4x4(0.9669915, 0.4213058, -0.4328625, 0.3306193, -0.0365897, 0.5731632, 0.3605574, 0.5190225, 0.2519916, -0.2943794, 0.0823520, 0.0943432, 0.4023930, 0.3061351, 0.0251671, -0.4716688)
            + intermediate_one[1][2] * float4x4(-0.3464495, 0.3344000, -0.1547502, 0.4048599, -0.5164365, 0.0816689, -0.3014391, 0.1035049, 0.2621160, -0.0392950, -0.2972676, -0.2546295, 0.3561526, 0.1528654, 0.4297886, -0.0649610)
            + intermediate_one[1][3] * float4x4(0.1200338, 0.7662972, 0.2413817, -0.1667272, 0.4163455, -0.2933670, 0.2685665, -0.5639012, -0.2303352, 0.4564731, 0.4245243, 0.0848933, -0.1009699, -0.1484354, -0.2402255, 0.2457813)
            + intermediate_one[2][0] * float4x4(-0.1246988, -0.4883550, 0.6262254, 0.0626802, 0.0348499, 0.1870533, -0.9061569, 0.4185489, 0.3482918, -0.0980759, -0.3115727, -0.1164134, 0.3268281, 0.0949105, -0.4071571, 0.1453207)
            + intermediate_one[2][1] * float4x4(-0.0880797, -0.0762531, -0.3072616, 0.1257581, -0.1505069, -0.3303138, -0.0190961, -0.5805124, 0.0298897, 0.2519999, 0.3229920, 0.0388779, -0.5064583, -0.0804741, -0.1841953, 0.1265475)
            + intermediate_one[2][2] * float4x4(-0.4118144, -0.4403790, -0.0496144, 0.3516011, 0.6041142, -0.0455514, 0.2126564, 0.0978781, -0.2196574, -0.4145372, 0.3360224, 0.2145111, 0.3052221, 0.3185410, 0.1199476, 0.3145788)
            + intermediate_one[2][3] * float4x4(0.8095048, 0.3680514, 0.2984354, -0.3430433, 0.5850543, -0.1313977, -0.0254851, -0.1633786, 0.0340103, 0.5747259, 0.0251032, -0.0905316, 0.1560677, -1.0281307, -0.1661441, 0.7486212)
            + intermediate_one[3][0] * float4x4(-0.9574177, -0.0104468, -0.1719157, -0.8537623, 0.0505459, -0.4228842, 0.1298152, 0.6230974, 0.9168290, 0.2030866, -0.6689162, 1.9030308, 0.0334224, 1.0206085, -0.3117944, -0.9006920)
            + intermediate_one[3][1] * float4x4(0.2967277, -0.2560332, 0.1898212, 0.6064441, -0.1777361, 0.2622502, -0.2600043, 0.7059860, 0.7440602, -0.2773350, -0.6221721, -0.4161702, -0.0847520, -0.8440683, 0.8288275, 0.1346310)
            + intermediate_one[3][2] * float4x4(-0.4977749, -0.3530226, -0.2501665, 0.0923703, 0.0133319, 0.3900849, -0.0516460, 0.0917256, 0.2509276, 0.5682241, 0.4079319, -0.1363902, -0.1161068, -0.3059351, 0.1802565, 0.2546400)
            + intermediate_one[3][3] * float4x4(-0.0945381, -0.6477119, 0.0115766, 0.4995441, -0.7280474, 0.2582519, -0.5021490, -0.3106584, 0.2505149, 0.1171442, -0.1490102, -0.6477869, 0.5168884, -1.6075982, -0.0324955, -0.2641950);
        intermediate_two[0] = max(intermediate_two[0], 0.0);
        intermediate_two[1] = max(intermediate_two[1], 0.0);
        intermediate_two[2] = max(intermediate_two[2], 0.0);
        intermediate_two[3] = max(intermediate_two[3], 0.0);
        float3 result = float3(
            0.0764290, 0.0864250, -0.0807647
        );
        result += intermediate_two[0][0] * float3(-0.5030252, 0.0493926, 0.4131816)
                + intermediate_two[0][1] * float3(0.4806728, 0.4019670, 0.6839331)
                + intermediate_two[0][2] * float3(-0.9789959, -0.9301629, -0.6542169)
                + intermediate_two[0][3] * float3(-0.0052527, 0.0450859, -0.5152473)
                + intermediate_two[1][0] * float3(0.7668164, 0.5488909, 0.4173580)
                + intermediate_two[1][1] * float3(-0.1443341, -0.5675271, -0.3855092)
                + intermediate_two[1][2] * float3(0.8227658, 1.0953649, 0.9298297)
                + intermediate_two[1][3] * float3(-0.2468828, -0.2428580, -0.2100369)
                + intermediate_two[2][0] * float3(-0.4265629, -0.4659965, 0.0406023)
                + intermediate_two[2][1] * float3(-0.0148608, 0.6441455, 0.1552228)
                + intermediate_two[2][2] * float3(0.4152945, -0.0317464, 0.2493387)
                + intermediate_two[2][3] * float3(0.0674309, 0.3877446, 0.0348834)
                + intermediate_two[3][0] * float3(-0.6700563, -0.3532138, -0.7581953)
                + intermediate_two[3][1] * float3(-0.4818425, -0.8414682, -0.0197080)
                + intermediate_two[3][2] * float3(-0.5021648, -0.4415972, -0.4914345)
                + intermediate_two[3][3] * float3(0.4734642, 0.0084477, 0.1063120);
		result = 1.0 / (1.0 + exp(-result));
        return result*viewdir.a+(1.0-viewdir.a);
    }
    ENDCG

    SubShader {
        Cull Off
        ZTest LEqual

        Pass {
            CGPROGRAM

            #pragma vertex vert
            #pragma fragment frag

            fixed4 frag(v2f i) : SV_Target {
                fixed4 diffuse0 = tex2D( tDiffuse0x, i.uv );
                if (diffuse0.r == 0.0) discard;
                fixed4 diffuse1 = tex2D( tDiffuse1x, i.uv );
                fixed4 rayDir = fixed4(normalize(i.rayDirection), 1.0);

                // normalize range to [-1, 1]
                diffuse0.a = diffuse0.a * 2.0 - 1.0;
                diffuse1.a = diffuse1.a * 2.0 - 1.0;

                fixed4 fragColor;
                fragColor.rgb = evaluateNetwork(diffuse0,diffuse1,rayDir);
                fragColor.a = 1.0;

                #if(!UNITY_COLORSPACE_GAMMA)
                    fragColor.rgb = GammaToLinearSpace(fragColor.rgb);
                #endif

                return fragColor;
            }
            ENDCG
        }

        // ------------------------------------------------------------------
        //  Shadow rendering pass
        Pass {
            Tags {"LightMode" = "ShadowCaster"}

            CGPROGRAM

            #pragma vertex vert
            #pragma fragment fragShadowCaster
            #pragma multi_compile_shadowcaster

            fixed4 fragShadowCaster(v2f i) : SV_Target{
                fixed4 diffuse0 = tex2D(tDiffuse0x, i.uv);
                if (diffuse0.r == 0.0) discard;
                return 0;
            }
            ENDCG
        }
    }
}